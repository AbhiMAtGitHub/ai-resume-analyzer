name: Destroy All Infrastructure

on:
  workflow_dispatch:   # manual trigger from any branch

permissions:
  id-token: write
  contents: read

env:
  PROJECT_NAME: resume-analyzer
  ENVIRONMENT: dev
  AWS_REGION: ap-south-1

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean Terraform cache
        run: |
          cd infra
          rm -rf .terraform .terraform.lock.hcl

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init (Reconfigure Backend)
        working-directory: infra
        run: terraform init -input=false -reconfigure

      - name: Unlock State (if previously locked)
        working-directory: infra
        continue-on-error: true
        run: |
          echo "Checking for Terraform lock..."
          LOCK_ID=$(aws dynamodb scan --table-name terraform-state-lock --query "Items[0].LockID.S" --output text 2>/dev/null || echo "")
          if [ "$LOCK_ID" != "None" ] && [ -n "$LOCK_ID" ]; then
            echo "Releasing lock ID: $LOCK_ID"
            aws dynamodb delete-item --table-name terraform-state-lock --key "{\"LockID\": {\"S\": \"$LOCK_ID\"}}"
          else
            echo "No active lock found."
          fi

      - name: Terraform Plan (Destroy)
        working-directory: infra
        run: terraform plan -destroy -out=tfplan-destroy

      - name: Terraform Destroy (Full Cleanup)
        working-directory: infra
        run: terraform destroy -auto-approve -input=false

      - name: Confirm Cleanup
        run: |
          echo "✅ Terraform destroy complete."
          echo "✅ All AWS resources from the project have been removed."
